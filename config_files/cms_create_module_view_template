<%
  import redis
  w_list_key =[]
  w_list_name =[]
  w_list_button =[]
  tr_index =''
  r = redis.StrictRedis()
  #M:Nom_module:form
  # data['name'] c'est le nom du module !!
 
  list_button = r.hgetall('M:'+data['name']+':Button')
  
  list_view = r.hgetall('M:'+data['name']+':Forms')
  for item in sorted(list_view):
    row_tmp = list_view[item].split(':')
    if row_tmp[1]=='yes' :
        w_list_key.append(row_tmp[3])
        w_list_name.append(row_tmp[2])
    if row_tmp[0]=='yes' : # index
        tr_index = row_tmp[3]
   
  for item in sorted(list_button):
    row_tmp = list_button[item].split(':')
    row = {}
    row['color'] = row_tmp[0]
    row['name'] = row_tmp[1]
    row['script'] = row_tmp[2]
    row['variable'] = row_tmp[3]
    w_list_button.append(row)

  
%>

extends ../layout


block CONTENT
          h1.page-header ${data['name']}
            a(href="/cms/edit_module/${data['name']}")
                span(class="glyphicon glyphicon-cog pull-right")
          ul(class="nav nav-tabs nav-justified")
            li
                a(href="/module/${data['name']}/form") New record
            li.active
                a(href="/module/${data['name']}/view") List

          
          h2.sub-header List
          div.table-responsive
            table.table.table-striped
              thead
                tr
                  th #
                % for name in w_list_name :  
                  th ${name}
                % endfor  
              tbody
              each hs in data
                tr(id="tr-#{hs.${tr_index}}")
                  td #
                 % for key in w_list_key :    
                  td= hs.${key}
                 % endfor   
                  td
                  % for butt in w_list_button :
                      % if len(butt['variable'])!=0 and butt['variable'][0]=='#':
                        button.btn.btn-${butt['color']}(onclick="run_script('${butt['script']}','#{hs.${butt['variable'].replace('#','')}}')",data-toggle="modal" data-target="#console",style='height:30px;margin-left:5px') ${butt['name']}
                      % else:
                        button.btn.btn-${butt['color']}(onclick="run_script('${butt['script']}','${butt['variable']}')",data-toggle="modal" data-target="#console",style='height:30px;margin-left:5px') ${butt['name']}
                      % endif                      
                  % endfor
                        a.btn.btn-default(href="/module/${data['name']}/edit/#{hs.${tr_index}}",style='height:30px; margin-left:5px') Edit
                        button.btn.btn-default(onclick="delete_row('#{hs.${tr_index}}')",style='height:30px; margin-left:5px') Remove




         
          script.
              var socket = io.connect();
              socket.on('console-emit',function(data){
                 $('#console-content').append(data.replace(/\n/g, "<br />"));
                 var psconsole = $('#console-content');
                  psconsole.scrollTop(
                    psconsole[0].scrollHeight - psconsole.height()
                  );
              });
              function run_script(src,arg)
              {
                var arguments = arg;
                $('#console').modal('show')
                $.post("/run_shaker/"+src,{argv: arguments },function(data){
                   
                  $('#console-content').append("finish");       
                });
                
              }
              function delete_row(idd)
              {
                $.post("/module/${data['name']}/del",{key: idd},function(data)
                {
                  if(data=="ok")
                  {
                    var sst = '#tr-'+idd.replace(/\./g,'\\.');  
                    //alert(sst);
                    $(sst).hide();}
                });
              }
              
              
         